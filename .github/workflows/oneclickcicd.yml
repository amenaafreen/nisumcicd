name: oneclick-ci-cd
on:
  workflow_dispatch:
  
env: 
  TAG: ${{ github.run_number }}
jobs:
  Maven_Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build with Maven 
        run: |
          mvn clean package -Dmaven.test.skip=true
      - name: Upload Artifacts      
        uses: actions/upload-artifact@v2
        with:
          name: AppArtifacts
          path: |
            **/*.jar
      - name: Branch_Name
        run: |
          echo "${{ github.ref_name }}"
  Sonarqube_Analysis:
    runs-on: ubuntu-latest
    needs: Maven_Build
    steps:
      - uses: actions/checkout@v2
      - name: Download Artifact.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts 
      - name: Build
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: |
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install -Dmaven.test.skip=true  org.jacoco:jacoco-maven-plugin:report 
      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          overwrite-settings: false
          distribution: 'adopt'  
      - name: Sonar analyze
        continue-on-error: true
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: |
          mvn sonar:sonar  -Dmaven.test.skip=true  -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}
  Docker_build_Docker_Push:
    runs-on: ubuntu-latest
    needs: [Sonarqube_Analysis]
    steps:
      - uses: actions/checkout@v2    
      - name: Download Artifact Jarfile.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts                 
      - name: Docker Build     
        uses: docker/login-action@v2
        with:
          registry: nnisumacr.azurecr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }}          
      - name: docker build
        run: |
          docker build --tag nisumacr.azurecr.io/nisumacr/webapp:${{ github.run_number }} .       
      - run: |
          docker push nisumacr.azurecr.io/nisumacr/webapp:${{ github.run_number }}
  app-deploy:
    runs-on: [ ubuntu-latest ]
    needs: [Docker_build_Docker_Push]
    steps:
      - uses: actions/checkout@v2        
      - name: Set K8s-context   
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.AKS_CLUSTER }}          
      - name: Docker Login    
        uses: docker/login-action@v2
        with:
          registry: nisumacr.azurecr.io
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }}
      - name: Deploy Application
        run: |
          set +e
          docker manifest inspect nisumacr.azurecr.io/nisumacr/webapp:${{ github.run_number }} >/dev/null 2>&1;
          EXIT_CODE=$?
          set -e
          if [[ $EXIT_CODE == '0' ]]; then
                  echo "Docker Image found with the given tag. Deploying application."

                  helm template --name-template=web-app-maven web-app-maven-chart -f web-app-maven-chart/values.yaml --set app.namespace=webapp,imagePullRepository=nisumacr.azurecr.io/nisumacr,image=webapp:${{ github.run_number }} > deploy-manifests.yaml   
                  cat deploy-manifests.yaml
                  kubectl apply -f deploy-manifests.yaml
          else
                  echo "No Docker Image found with the given tag. Skipping deployment." 
                  exit 1
          fi


