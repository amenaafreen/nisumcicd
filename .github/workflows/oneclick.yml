name: oneclick-ci-nonprod

on:
 workflow_call:
   inputs:
      ACTIONSFILE:    
        required: true
        type: string
      TAG:    
        required: true
        type: string 
      build_type:
        required: true
        type: string
      VERACODE_APPNAME:
       required: true  
       type: string
      javaVersion:
        required: true
        type: number 
      branch_name: 
         required: false
         type: string   
      customCommand:
        type: string
        required: false
        default: ''
         
   secrets:  
     SONAR_TOKEN:
       required: true
     SONAR_HOST_URL:
       required: true
     TL_USERNAME:
       required: true
     TL_PASSWORD:
       required: true
     REGISTRY_USER:
       required: true
     REGISTRY_PWD:
       required: true
     VERACODEID:
       required: true
     VERACODEKEY:
       required: true
     SONAR_CONTINUEONERROR_NONPROD:
       required: false
     VERACODE_CONTINUEONERROR_NONPROD:
       required: false

env: 
  ACTIONSFILE: ${{ inputs.ACTIONSFILE }}
  TAG: ${{ inputs.TAG }}
jobs:
  Maven_Build:
    runs-on: [ AKS ]
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK '${{ inputs.javaVersion }}'
        uses: actions/setup-java@v2
        with:
          java-version: '${{ inputs.javaVersion }}'
          distribution: 'adopt'
          overwrite-settings: false
      - name: Build with Maven 
        run: |
          if [[ ${{ inputs.build_type }} == 'maven' ]]
          then
          cp /home/es00gh/settings.xml .
          ls -l 
          mvn clean install --settings settings.xml
          ${{ inputs.customCommand }} 
          fi
      - name: Build with Maven Wrapper
        run: |
          if [[ ${{ inputs.build_type }} == 'mavenwrapper' ]]
          then
          cp /home/es00gh/settings.xml .
          chmod +x mvnw
          ls -l 
          date=$(echo ${{ steps.date.outputs.date }} | cut -c 3-)
          ./mvnw clean install --settings settings.xml
          ${{ inputs.customCommand }}
          fi
      - name: Upload Artifacts      
        uses: actions/upload-artifact@v2
        with:
          name: AppArtifacts
          path: |
            **/target/*.jar
            settings.xml
            **/*.ear
            **/*.sh
            **/*.war
      - name: Branch_Name
        run: |
          echo "${{ github.ref_name }}"
          
  Sonarqube_Analysis:
    runs-on: [ AKS ]
    needs: Maven_Build
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK '${{ inputs.javaVersion }}'
        uses: actions/setup-java@v2
        with:
          java-version: '${{ inputs.javaVersion }}'
          overwrite-settings: false
          distribution: 'adopt'
      - name: Download Artifact.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts 
      - name: Build
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: |
          mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install org.jacoco:jacoco-maven-plugin:report  --settings settings.xml
      - name: Setup JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: 11
          overwrite-settings: false
          distribution: 'adopt'  
      - name: Sonar analyze
        continue-on-error: ${{ secrets.SONAR_CONTINUEONERROR_NONPROD == 'true' }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}  
        run: |
          mvn sonar:sonar -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }}  --settings settings.xml
  Veracode_scan:
    runs-on: [ veracode ]
    needs: Sonarqube_Analysis
    steps:
      - uses: actions/checkout@v2    
      - name: Download Artifact.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts           
      - name: veracode scan
        continue-on-error: ${{ secrets.VERACODE_CONTINUEONERROR_NONPROD == 'true' }}
        run: |
          date=$(echo ${{ steps.date.outputs.date }} | cut -c 3-)
          echo "${date}"
          ls -la
          wget https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip -o -d /tmp pipeline-scan-LATEST.zip
          java -jar /tmp/pipeline-scan.jar --veracode_api_id "${{ secrets.VERACODEID }}" --veracode_api_key "${{ secrets.VERACODEKEY }}" --request_policy "Current ABS-Non-PCI Standard 3.0"
          find . -name \*.jar -exec java -jar /tmp/pipeline-scan.jar --veracode_api_id "${{ secrets.VERACODEID }}" --veracode_api_key "${{ secrets.VERACODEKEY }}" --fail_on_severity="Very High, High" --file {} \;
  Junit_test_and_report:
    runs-on: [ aks]
    needs: Veracode_scan
    steps:
     - uses: actions/checkout@v2
     - name: Set up JDK '${{ inputs.javaVersion }}'
       uses: actions/setup-java@v2
       with:
          java-version: '${{ inputs.javaVersion }}'
          overwrite-settings: false
          distribution: 'adopt'
          #cache: maven
     - name: Run tests with Maven
       run: |
        cp /home/es00gh/settings.xml .
        mvn -B test --file pom.xml --settings settings.xml
       #run: mvn clean test  
     - name: Download Artifact.
       uses: actions/download-artifact@v2
       with:
         name: AppArtifacts           
     - name: Publish Unit Test Results  
       uses: albertsons/esgh-actions-publish-unit-test-result@v1    
       if: always()
       with:
         files: "target/surefire-reports/*.xml"        
  
  Docker_build_Twistlock_And_Docker_Push:
    runs-on: [ AKS ]
    needs:  [Junit_test_and_report]
    steps:
      - uses: actions/checkout@v2    
      - name: Download Artifact Jarfile.
        uses: actions/download-artifact@v2
        with:
          name: AppArtifacts 
      - name: Read application properties file
        id: appcode
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APPCODE           
      - name: Read application properties file
        id: app_name
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.APP_NAME
      - name: Read application properties file
        id: registry_url
        uses: albertsons/esgh-actions-jsonread@release
        with:
           path: ${{ env.ACTIONSFILE }}
           prop_path: application_properties.REGISTRY_URL                
      - name: Docker Build     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }}          
      - run: |
          docker build --tag ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }} .       
      - name: Twistlock Analysis
        id: scan
        uses: albertsons/esgh-prisma-twistlock@v1
        with:
          pcc_console_url: https://us-east1.cloud.twistlock.com/us-2-158288594
          pcc_user: ${{ secrets.TL_USERNAME }}
          pcc_pass: ${{ secrets.TL_PASSWORD }}
          image_name: ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}

      - name: Docker login and Push Image to registry     
        uses: albertsons/esgh-docker-login@v1
        with:
          registry: ${{ steps.registry_url.outputs.prop }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PWD }} 
      - run: |
          docker push ${{ steps.registry_url.outputs.prop }}/${{ steps.appcode.outputs.prop }}/${{ steps.app_name.outputs.prop }}:${{ env.TAG }}
      - name: clean workspace
        uses: albertsons/esgh-workspace-clean@v2-bash
      - name: Printing workspace cleaned message
        run: |
          echo "Workspace cleared for run ID ${{ github.run_number }}"  
